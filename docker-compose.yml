version: "3.9"

services:
  api-gateway:
    build: ./services/gateway
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      - API_GATEWAY_PORT=${API_GATEWAY_PORT:-8080}
      - USER_SERVICE_URL=http://user-service:3001
      - ANALYTICS_SERVICE_URL=http://analytics-service:3002
      - WORKFLOW_SERVICE_URL=http://workflows-service:3003
      - REDIS_URL=redis://:seentics_redis_pass@redis:6379
      - GLOBAL_API_KEY=${GLOBAL_API_KEY}
    depends_on:
      - user-service
      - analytics-service
      - workflows-service
      - redis
    networks:
      - seentics-network

  user-service:
    build: ./services/users
    container_name: user-service
    ports:
      - "3001:3001"
    env_file: .env.development
    environment:
      - PORT=3001
      - MONGODB_URI=mongodb://seentics:seentics_mongo_pass@mongodb:27017/seentics?authSource=admin
      - USER_JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGIN=${FRONTEND_URL}
      - GLOBAL_API_KEY=${GLOBAL_API_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - seentics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  analytics-service:
    build: ./services/analytics
    container_name: analytics-service
    ports:
      - "3002:3002"
    env_file: .env.development
    environment:
      - ENVIRONMENT=development
      - PORT=3002
      - DATABASE_URL=postgres://seentics:seentics_postgres_pass@timescaledb:5432/seentics_analytics?sslmode=disable
      - LOG_LEVEL=info
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis:6379
      - REDIS_PASSWORD=seentics_redis_pass
      - GLOBAL_API_KEY=${GLOBAL_API_KEY}
      - USER_SERVICE_URL=http://user-service:3001
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - seentics-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  workflows-service:
    build: ./services/workflows
    container_name: workflows-service
    ports:
      - "3003:3003"
    env_file: .env.development
    environment:
      - PORT=3003
      - MONGODB_URI=mongodb://seentics:seentics_mongo_pass@mongodb:27017/seentics_workflows?authSource=admin
      - REDIS_URL=redis://:seentics_redis_pass@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - API_GATEWAY_URL=http://api-gateway:8080
      - GLOBAL_API_KEY=${GLOBAL_API_KEY}
      - USERS_SERVICE_URL=http://user-service:3001
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM=${RESEND_FROM}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - seentics-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  mongodb:
    image: mongo:7
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=seentics
      - MONGO_INITDB_ROOT_PASSWORD=seentics_mongo_pass
    volumes:
      - mongo-data:/data/db
    networks:
      - seentics-network
    restart: unless-stopped
    command: mongod --auth --wiredTigerCacheSizeGB 1 --maxConns 100
    healthcheck:
      test: ["CMD-SHELL", "mongosh --username seentics --password seentics_mongo_pass --eval 'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: seentics
      POSTGRES_PASSWORD: seentics_postgres_pass
      POSTGRES_DB: seentics_analytics
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    networks:
      - seentics-network
    restart: unless-stopped
    command: ["postgres", "-c", "shared_preload_libraries=timescaledb"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seentics -d seentics_analytics -h localhost -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass seentics_redis_pass --maxmemory 256mb --maxmemory-policy allkeys-lru --save "" --appendonly no
    volumes:
      - redis-data:/data
    networks:
      - seentics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "seentics_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  mongo-data:
  timescaledb-data:
  redis-data:

networks:
  seentics-network:
    driver: bridge
